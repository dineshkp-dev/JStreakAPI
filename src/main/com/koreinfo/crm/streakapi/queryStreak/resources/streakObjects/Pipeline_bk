package com.koreinfo.crm.streakapi.queryStreak.resources.streakObjects;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.utils.URIBuilder;

import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.koreinfo.crm.streakapi.exceptions.NoValidObjectsReturned;
import com.koreinfo.crm.streakapi.queryStreak.StreakAPI;
import com.koreinfo.crm.streakapi.queryStreak.resources.StreakBaseURI;
/**
 * @author dineshkp
 *
 */
public class Pipeline extends StreakAPI {
	private HttpEntity httpEntity;
	


	private String creatorKey;
	private String name;
	private String description;
	private boolean  orgWide;
	private Field[] fields; // Read-only
	private Stage stages; // Read-only
	private String[] stageOrder;
	private AclEntry[] aclEntries;
	private String owner;
	Map<String, Object> otherItemsMap = new HashMap<String, Object>();
	
//	public Pipeline(String userKey) {
//		super(userKey);
//	}
	
	@SuppressWarnings("unused")
	private Pipeline() { }
	
	public class PipelineArr {
		private Pipeline pipeline = new Pipeline();
		
		@JsonCreator
		public PipelineArr() {}
		/**
		 * @return the pipeline
		 */
		@JsonGetter
		public Pipeline getPipeline() {
			return pipeline;
		}

		/**
		 * @param pipeline the pipeline to set
		 */
		@JsonSetter
		public void setPipeline(Pipeline pipeline) {
			System.out.println(pipeline.getCreatorKey());
			this.pipeline = pipeline;
		}
	}
	

	/**
	 * @return the creatorKey
	 */
	@JsonGetter
	public String getCreatorKey() {
		return creatorKey;
	}

	/**
	 * @return the name
	 */
	@JsonGetter
	public String getName() {
		return name;
	}

	/**
	 * @return the description
	 */
	@JsonGetter
	public String getDescription() {
		return description;
	}

	/**
	 * @return the orgWide
	 */
	@JsonGetter
	@JsonProperty("orgWide")
	public boolean isOrgWide() {
		return orgWide;
	}

	/**
	 * @return the fields
	 */
	@JsonGetter
	public Field[] getFields() {
		return fields;
	}

	/**
	 * @return the stages
	 */
	@JsonGetter
	public Stage getStages() {
		return stages;
	}

	/**
	 * @return the stageOrder
	 */
	@JsonGetter
	public String[] getStageOrder() {
		return stageOrder;
	}

	/**
	 * @return the aclEntries
	 */
	@JsonGetter
	public AclEntry[] getAclEntries() {
		return aclEntries;
	}

	/**
	 * @return the owner
	 */
	@JsonGetter
	public String getOwner() {
		return owner;
	}

	/**
	 * @param creatorKey the creatorKey to set
	 */
	@JsonSetter
	public void setCreatorKey(String creatorKey) {
		this.creatorKey = creatorKey;
	}

	/**
	 * @param name the name to set
	 */
	@JsonSetter
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @param description the description to set
	 */
	@JsonSetter
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * @param orgWide the orgWide to set
	 */
	@JsonSetter
	@JsonProperty("orgWide")
	public void setOrgWide(boolean orgWide) {
		this.orgWide = orgWide;
	}

	/**
	 * @param stageOrder the stageOrder to set
	 */
	@JsonSetter
	public void setStageOrder(String[] stageOrder) {
		this.stageOrder = stageOrder;
	}

	/**
	 * @param aclEntries the aclEntries to set
	 */
	@JsonSetter
	public void setAclEntries(AclEntry[] aclEntries) {
		this.aclEntries = aclEntries;
	}

	/**
	 * @param owner the owner to set
	 */
	@JsonSetter
	public void setOwner(String owner) {
		this.owner = owner;
	}
	
	@JsonAnySetter
	private void unknownItemHandler(String key, Object value) {
		otherItemsMap.put(key, value);
		System.out.println("Unmapped item found: " + key + ":" + value);
	}

	public Map<String, Object> getotherItemsMap() {
		return otherItemsMap;
	}
}
